//
//  APIClient.swift
//  The API Awakens
//
//  Created by Stephen McMillan on 28/01/2019.
//  Copyright Â© 2019 Stephen McMillan. All rights reserved.
//

import Foundation

protocol DownloaderDelegate: class {
    
    // Called when downloader completes its assigned download task.
    func downloadFinished<Entity: ComparableStarWarsEntity>(results: [Entity])
    
    // Called when an error is generated by the delegate.
    func errorOccuredDuringDownload(error: StarWarsAPIError)
}

class Downloader<Result: EntityResult> {
    
    var results = [Result.Entity]()
    weak var delegate: DownloaderDelegate?
    
    private var nextPage: URLRequest?
    private let urlSession = URLSession(configuration: .default)
    
    init(endpoint: Endpoint) {
        self.nextPage = endpoint.request
    }
    
    func getData() {
        
        guard let nextPageRequest = nextPage else { return }
        
        let dataTask = urlSession.dataTask(with: nextPageRequest, completionHandler: dataReceived)
        
        dataTask.resume()
    }
    
    // When the data is downloaded, this is called.
    func dataReceived(data: Data?, response: URLResponse?, error: Error?) {
    
        // Unpack all the data and check for errors etc.
        // Delegate can have error or completion idk.
    
        let decodedResult = try! JSONDecoder.defaultDecoder.decode(Result.self, from: data!) // FIXME: This needs error handling
        
        results.append(contentsOf: decodedResult.results)
        
        if let nextPageUrlString = decodedResult.next, let nextPageUrl = URL(string: nextPageUrlString) {
            // There is a next page, we need to download it.
            
            nextPage = URLRequest(url: nextPageUrl)
            
            getData()
            
            
        } else {
            // There are no further pages, we can exit the downloader and inform the delegate.
            DispatchQueue.main.async {
                self.delegate?.downloadFinished(results: self.results)
            }
        }
    
    }
}

extension JSONDecoder {
    static let defaultDecoder: JSONDecoder = {
        let defaultDecoder = JSONDecoder()
        defaultDecoder.keyDecodingStrategy = .convertFromSnakeCase
        return defaultDecoder
    }()
}
